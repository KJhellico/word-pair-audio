import streamlit as st
from gtts import gTTS
from pydub import AudioSegment
import tempfile
import os
from io import BytesIO

AVAILABLE_LANGS = {
    "–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞": "fr",
    "–†–æ—Å—ñ–π—Å—å–∫–∞": "ru",
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk"
}

if "history" not in st.session_state:
    st.session_state.history = []

st.title("–û–∑–≤—É—á–µ–Ω–Ω—è –ø–∞—Ä —Å–ª—ñ–≤ –¥–≤–æ–º–∞ –º–æ–≤–∞–º–∏")

col1, col2 = st.columns(2)
with col1:
    lang1 = st.selectbox("–ú–æ–≤–∞ —Å–ø–∏—Å–∫—É 1", list(AVAILABLE_LANGS.keys()), index=0)
with col2:
    lang2 = st.selectbox("–ú–æ–≤–∞ —Å–ø–∏—Å–∫—É 2", list(AVAILABLE_LANGS.keys()), index=1)

lang_code1 = AVAILABLE_LANGS[lang1]
lang_code2 = AVAILABLE_LANGS[lang2]

slow = st.checkbox("–ü–æ–≤—ñ–ª—å–Ω–µ —á–∏—Ç–∞–Ω–Ω—è", value=True)
pause_ms = st.slider("–ü–∞—É–∑–∞ –º—ñ–∂ —Å–ª–æ–≤–∞–º–∏ (–º—Å)", 200, 2000, 500, 100)

words1 = st.text_area("–°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ –º–æ–≤–æ—é 1 (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–æ–∫)").strip().splitlines()
words2 = st.text_area("–°–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ –º–æ–≤–æ—é 2 (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–æ–∫)").strip().splitlines()

if st.button("üîä –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∞—É–¥—ñ–æ"):
    if len(words1) != len(words2):
        st.error("‚ùå –°–ø–∏—Å–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–æ—ó –¥–æ–≤–∂–∏–Ω–∏.")
    elif not words1 or not words2:
        st.warning("‚ö†Ô∏è –û–±–∏–¥–≤–∞ —Å–ø–∏—Å–∫–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ.")
    else:
        segments = []
        with tempfile.TemporaryDirectory() as tmpdir:
            for i, (w1, w2) in enumerate(zip(words1, words2)):
                tts1 = gTTS(text=w1, lang=lang_code1, slow=slow)
                tts2 = gTTS(text=w2, lang=lang_code2, slow=slow)

                path1 = os.path.join(tmpdir, f"{i}_1.mp3")
                path2 = os.path.join(tmpdir, f"{i}_2.mp3")
                tts1.save(path1)
                tts2.save(path2)

                audio1 = AudioSegment.from_file(path1)
                audio2 = AudioSegment.from_file(path2)
                pause = AudioSegment.silent(duration=pause_ms)

                segments.extend([audio1, pause, audio2, pause])

            final_audio = sum(segments)
            buffer = BytesIO()
            final_audio.export(buffer, format="mp3")
            buffer.seek(0)

            st.session_state.history.append({
                "lang1": lang1,
                "lang2": lang2,
                "words1": words1,
                "words2": words2,
                "audio": buffer.getvalue()
            })

            st.success("‚úÖ –ê—É–¥—ñ–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")
            st.audio(buffer, format="audio/mp3")
            st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ MP3", buffer, file_name="translated_words.mp3")

if st.session_state.history:
    st.markdown("## üïò –Ü—Å—Ç–æ—Ä—ñ—è")
    for idx, item in enumerate(reversed(st.session_state.history)):
        st.markdown(f"**–ü–∞—Ä–∞ {len(st.session_state.history)-idx}: {item["lang1"]} ‚Üí {item["lang2"]}**")
        st.audio(item["audio"], format="audio/mp3")
        st.download_button(
            label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏",
            data=item["audio"],
            file_name=f"history_{len(st.session_state.history)-idx}.mp3",
            key=f"download_{idx}"
        )
